/*
Copyright Â© 2023 weak_ptr <weak_ptr@outlook.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
*/
package cmd

import (
	"fmt"
	"go/importer"
	"go/token"
	"go/types"
	"log"
	"os"
	"strings"

	"github.com/dave/jennifer/jen"
	"github.com/spf13/cobra"

	"github.com/nnnewb/jk/internal/gen"
	"github.com/nnnewb/jk/internal/utils"
)

// allCmd represents the all command
var allCmd = &cobra.Command{
	Use:   "all",
	Short: "Generate all we can.",
	Long:  `Generate all we can.`,
	Run: func(cmd *cobra.Command, args []string) {
		pkgPath, err := cmd.Flags().GetString("package")
		cobra.CheckErr(err)
		typeName, err := cmd.Flags().GetString("typename")
		cobra.CheckErr(err)
		apiVer, err := cmd.Flags().GetString("api-version")
		cobra.CheckErr(err)

		if pkgPath == "" {
			wd, err := os.Getwd()
			if err != nil {
				log.Fatalf("get working directory failed, error %+v", err)
			}

			pkgPath, err = utils.ResolveFullPackagePath(wd, wd)
			if err != nil {
				log.Fatalf("can not resolve full path of current working directory %s, error %+v", wd, err)
			}
		}

		fset := token.NewFileSet()
		imp := importer.ForCompiler(fset, "source", nil)
		pkg, err := imp.Import(pkgPath)
		if err != nil {
			log.Fatalf("import package %s failed, error %+v", pkgPath, err)
		}

		result := pkg.Scope().Lookup(typeName)
		if result == nil {
			log.Fatalf("type %s not found in package %s", typeName, pkgPath)
		}

		f := jen.NewFilePath(result.Pkg().Path())
		f.HeaderComment(fmt.Sprintf("Code generated by jk %s; DO NOT EDIT.", strings.Join(os.Args[1:], " ")))
		gen.InitializeFileCommon(f)
		err = gen.GenerateEndpoints(f, result.Type().(*types.Named))
		if err != nil {
			log.Fatalf("generate endpoints for service failed, error %+v", err)
		}

		err = f.Save("endpoint_gen.go")
		if err != nil {
			log.Fatalf("render generated service layer code failed, error %+v", err)
		}

		f = jen.NewFilePath(result.Pkg().Path())
		f.HeaderComment(fmt.Sprintf("Code generated by jk %s; DO NOT EDIT.", strings.Join(os.Args[1:], " ")))
		gen.InitializeFileCommon(f)
		gen.GenerateHTTPTransport(f, result.Type().(*types.Named), apiVer)

		err = f.Save("transport_gen.go")
		if err != nil {
			log.Fatalf("render generated transport layer code failed, error %+v", err)
		}

		file, err := os.OpenFile("swagger.json", os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0o644)
		if err != nil {
			log.Fatalf("open file failed, error %+v", err)
		}

		err = gen.GenerateSwagger(file, result.Type().(*types.Named), apiVer, "0.1.0")
		if err != nil {
			log.Fatalf("generate swagger failed, error %+v", err)
		}
	},
}

func init() {
	generateCmd.AddCommand(allCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// allCmd.PersistentFlags().String("foo", "", "A help for foo")
	allCmd.PersistentFlags().String("api-version", "v1", "API version, like v1/v2/v3...")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// allCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
