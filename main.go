package main

import (
	"github.com/dave/jennifer/jen"
	"github.com/nnnewb/jk/internal/gen"
	"go/ast"
	"go/importer"
	"go/parser"
	"go/token"
	"go/types"
	"log"
	"os"
	"path/filepath"

	"github.com/spf13/pflag"
)

var cliArgs = struct {
	TypeName string
}{}

func init() {
	pflag.StringVarP(&cliArgs.TypeName, "type", "t", "", "type name of service interface")
}

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	pflag.Parse()
	// Parse the current directory as a Go package
	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, filepath.Clean("."), nil, parser.DeclarationErrors)
	if err != nil {
		log.Printf("failed to parse package, error %+v", err)
		os.Exit(1)
	}

	// Get the first package from the parsed packages map
	var pkg *ast.Package
	for _, p := range pkgs {
		pkg = p
		break
	}

	// Make sure pkg is not nil
	if pkg == nil {
		log.Fatal("no package found in current working directory")
	}

	// Create a new types.Config and populate it with the package's files
	conf := types.Config{Importer: importer.Default()}
	var files []*ast.File
	for _, f := range pkg.Files {
		files = append(files, f)
	}
	pkgInfo := &types.Info{
		Types: make(map[ast.Expr]types.TypeAndValue),
	}
	pkg1, err := conf.Check(pkg.Name, fset, files, pkgInfo)
	if err != nil {
		log.Fatalf("failed to type check package, error %+v", err)
	}

	// Get the Type instance for the specified type name
	var (
		typeName = cliArgs.TypeName
		typeObj  *types.Named
		ok       bool
	)
	if typeObj, ok = pkg1.Scope().Lookup(typeName).Type().(*types.Named); !ok {
		log.Fatalf("object %s is not named", pkg1.Scope().Lookup(typeName).Type())
	}

	if typeObj == nil {
		log.Fatalf("type %s not found", typeName)
	}

	f := jen.NewFilePath(typeObj.Obj().Pkg().Path())
	f.HeaderComment("This file is generated by jk; DO NOT EDIT")
	err = gen.GenerateEndpoints(f, typeObj)
	if err != nil {
		log.Fatalf("generate endpoint factory for service failed, error %+v", err)
	}

	err = f.Save("endpoint_gen.go")
	if err != nil {
		log.Fatalf("render generated code failed, error %+v", err)
	}
}
