package service

import (
	"fmt"
	"go/types"
	"log"

	"github.com/dave/jennifer/jen"
	"github.com/iancoleman/strcase"
	"github.com/nnnewb/jk/pkg/generator/driver"
	"github.com/nnnewb/jk/pkg/generator/utils"
)

func init() {
	driver.RegisterServiceGenDriver("", defaultServiceGenerator{})
}

type defaultServiceGenerator struct {
	req *driver.GenerateRequest
}

func (d defaultServiceGenerator) GenerateService(req *driver.GenerateRequest) error {
	d.req = req
	gf := req.GenFile("endpoint_gen.go")
	f := jen.NewFile(req.Pkg.Name())
	f.HeaderComment("This file is generated by jk, DO NOT EDIT.")

	err := d.generateEndpointsStruct(req)
	if err != nil {
		return err
	}

	for i := 0; i < req.Svc.NumMethods(); i++ {
		method := req.Svc.Method(i)
		if !method.Exported() {
			log.Printf("ignore private method %s", method.Name())
			continue
		}

		// preflight check, see comments of utils.CheckMethodSignature for more detail
		if !utils.CheckMethodSignature(method) {
			continue
		}

		methodName := method.Name()
		methodType := method.Type().(*types.Signature)

		// generate code
		// 1. create request/response struct
		// 2. create makeXxxEndpoint function to create endpoint for method

		// create request struct
		log.Printf("create request composite struct for %s", methodName)
		f.Type().
			Id(fmt.Sprintf("%sRequest", methodName)).
			StructFunc(func(g *jen.Group) {
				for i := 1; i < methodType.Params().Len(); i++ {
					param := methodType.Params().At(i)

					g.Id(strcase.ToCamel(param.Name())).Add(utils.TypeQual(req.Pkg, param.Type()))
				}
			}).
			Line()

		// create response struct
		log.Printf("create response composite struct for %s", methodName)
		f.Type().
			Id(fmt.Sprintf("%sResponse", methodName)).
			StructFunc(func(g *jen.Group) {
				for i := 0; i < methodType.Results().Len()-1; i++ {
					result := methodType.Results().At(i)

					g.Id(strcase.ToCamel(result.Name())).Add(utils.TypeQual(req.Pkg, result.Type()))
				}
			}).
			Line()

		// create endpoint constructor for method
		log.Printf("create endpoint constructor for %s", methodName)
		f.Func().Id(fmt.Sprintf("make%sEndpoint", methodName)).
			Params(jen.Id("svc").Id(req.SvcName)).
			Params(jen.Qual("github.com/go-kit/kit/endpoint", "Endpoint")).
			Block(
				jen.Return(jen.Func().
					Params(jen.Id("ctx").Qual("context", "Context"), jen.Id("req").Interface()).
					Params(jen.Interface(), jen.Error()).
					BlockFunc(func(g *jen.Group) {
						// request := req.(*XxxRequest)
						g.Id("request").Op(":=").Id("req").Assert(jen.Op("*").Id(fmt.Sprintf("%sRequest", methodName)))

						// result1,...,err := svc.Xxx(ctx, param1, ...)
						g.
							ListFunc(func(g *jen.Group) {
								for i := 0; i < methodType.Results().Len(); i++ {
									result := methodType.Results().At(i)
									g.Id(strcase.ToLowerCamel(result.Name()))
								}
							}).
							Op(":=").
							Id("svc").Dot(methodName).
							CallFunc(func(g *jen.Group) {
								g.Id("ctx")
								for i := 1; i < methodType.Params().Len(); i++ {
									param := methodType.Params().At(i)
									g.Id("request").Dot(strcase.ToCamel(param.Name()))
								}
							})

						// if err != nil { return nil, err }
						g.If(jen.Id("err").Op("!=").Nil()).
							Block(jen.Return(jen.Nil(), jen.Id("err")))

						// resp := &XxxResponse{Result1: result1, ...}
						g.Id("resp").Op(":=").Op("&").Id(fmt.Sprintf("%sResponse", methodName)).
							ValuesFunc(func(g *jen.Group) {
								g.Add(jen.DictFunc(func(dict jen.Dict) {
									for i := 0; i < methodType.Results().Len()-1; i++ {
										result := methodType.Results().At(i)
										dict[jen.Id(strcase.ToCamel(result.Name()))] = jen.Id(strcase.ToLowerCamel(result.Name()))
									}
								}))
							})

						// return resp, nil
						g.Return(jen.Id("resp"), jen.Nil())
					}),
				),
			).
			Line()
	}
	return f.Render(gf.Writer)
}

// generateEndpointsStruct generate endpointset struct for future use.
func (d defaultServiceGenerator) generateEndpointsStruct(req *driver.GenerateRequest) error {
	gf := req.GenFile("endpoints_gen.go")
	f := jen.NewFile(req.Pkg.Name())
	f.HeaderComment("This file is generated by jk, DO NOT EDIT.")

	structName := fmt.Sprintf("%sEndpoints", req.SvcName)

	f.Type().Id(structName).StructFunc(func(g *jen.Group) {
		for i := 0; i < req.Svc.NumMethods(); i++ {
			method := req.Svc.Method(i)
			if !method.Exported() || !utils.CheckMethodSignature(method) {
				continue
			}

			g.Id(strcase.ToLowerCamel(method.Name())).Qual("github.com/go-kit/kit/endpoint", "Endpoint")
		}
	})

	for i := 0; i < req.Svc.NumMethods(); i++ {
		method := req.Svc.Method(i)
		if !method.Exported() {
			continue
		}

		// preflight check, see comments of utils.CheckMethodSignature for more detail
		if !utils.CheckMethodSignature(method) {
			continue
		}

		methodName := method.Name()
		methodType := method.Type().(*types.Signature)

		f.Func().
			Params(jen.Id("s").Id(structName)).
			Id(methodName).
			ParamsFunc(func(g *jen.Group) {
				for i := 0; i < methodType.Params().Len(); i++ {
					param := methodType.Params().At(i)

					g.Id(strcase.ToLowerCamel(param.Name())).Add(utils.TypeQual(req.Pkg, param.Type()))
				}
			}).
			ParamsFunc(func(g *jen.Group) {
				for i := 0; i < methodType.Results().Len(); i++ {
					result := methodType.Results().At(i)

					g.Id(strcase.ToLowerCamel(result.Name())).Add(utils.TypeQual(req.Pkg, result.Type()))
				}
			}).
			BlockFunc(func(g *jen.Group) {
				// request := &XxxRequest{Param1: param1, ...}
				g.Id("request").Op(":=").Op("&").Id(fmt.Sprintf("%sRequest", methodName)).
					ValuesFunc(func(g *jen.Group) {
						g.Add(jen.DictFunc(func(dict jen.Dict) {
							for i := 1; i < methodType.Params().Len(); i++ {
								param := methodType.Params().At(i)
								dict[jen.Id(strcase.ToCamel(param.Name()))] = jen.Id(strcase.ToLowerCamel(param.Name()))
							}
						}))
					})

				g.List(jen.Id("resp"), jen.Id("err")).Op(":=").Id("s").Dot(strcase.ToLowerCamel(methodName)).Call(jen.Id("ctx"), jen.Id("request"))

				g.If(jen.Id("err").Op("!=").Nil()).BlockFunc(func(g *jen.Group) {
					g.Return(jen.ListFunc(func(g *jen.Group) {
						for i := 0; i < methodType.Results().Len()-1; i++ {
							result := methodType.Results().At(i)
							g.Add(utils.ZeroLit(result.Type()))
						}
						g.Id("err")
					}))
				})

				g.Id("response").Op(":=").Id("resp").Assert(jen.Op("*").Id(fmt.Sprintf("%sResponse", methodName)))

				g.ListFunc(func(g *jen.Group) {
					for i := 0; i < methodType.Results().Len()-1; i++ {
						result := methodType.Results().At(i)
						g.Id(strcase.ToLowerCamel(result.Name()))
					}
				}).Op("=").ListFunc(func(g *jen.Group) {
					for i := 0; i < methodType.Results().Len()-1; i++ {
						result := methodType.Results().At(i)
						g.Id("response").Dot(strcase.ToCamel(result.Name()))
					}
				})

				g.Return(jen.ListFunc(func(g *jen.Group) {
					for i := 0; i < methodType.Results().Len()-1; i++ {
						result := methodType.Results().At(i)
						g.Id(strcase.ToLowerCamel(result.Name()))
					}
					g.Nil()
				}))
			}).
			Line()
	}

	return f.Render(gf.Writer)
}
