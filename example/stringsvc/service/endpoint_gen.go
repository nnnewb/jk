// This file is generated by jk; DO NOT EDIT

package service

import (
	"context"
	"github.com/go-kit/kit/endpoint"
)

// MakeBuyEndpoint create endpoint.Endpoint for function service.Buy
func MakeBuyEndpoint(svc Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		request := req.(BuyRequest)
		return svc.Buy(ctx, request)
	}
}

// MakeJoinEndpoint create endpoint.Endpoint for function service.Join
func MakeJoinEndpoint(svc Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		request := req.(JoinRequest)
		return svc.Join(ctx, request)
	}
}

// MakeJoin2Endpoint create endpoint.Endpoint for function service.Join2
func MakeJoin2Endpoint(svc Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		request := req.(Join2Request)
		return svc.Join2(ctx, request)
	}
}

// MakeJoin3Endpoint create endpoint.Endpoint for function service.Join3
func MakeJoin3Endpoint(svc Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		request := req.(Join3Request)
		return svc.Join3(ctx, request)
	}
}

// MakeLowercaseEndpoint create endpoint.Endpoint for function service.Lowercase
func MakeLowercaseEndpoint(svc Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		request := req.(LowercaseRequest)
		return svc.Lowercase(ctx, request)
	}
}

// MakeUppercaseEndpoint create endpoint.Endpoint for function service.Uppercase
func MakeUppercaseEndpoint(svc Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		request := req.(UppercaseRequest)
		return svc.Uppercase(ctx, request)
	}
}

type EndpointSet struct {
	BuyEndpoint       endpoint.Endpoint
	JoinEndpoint      endpoint.Endpoint
	Join2Endpoint     endpoint.Endpoint
	Join3Endpoint     endpoint.Endpoint
	LowercaseEndpoint endpoint.Endpoint
	UppercaseEndpoint endpoint.Endpoint
}

func (s EndpointSet) Buy(ctx context.Context, req BuyRequest) (res BuyResponse, err error) {
	resp, err := s.BuyEndpoint(ctx, req)
	return resp.(BuyResponse), err
}

func (s EndpointSet) Join(ctx context.Context, req JoinRequest) (res JoinResponse, err error) {
	resp, err := s.JoinEndpoint(ctx, req)
	return resp.(JoinResponse), err
}

func (s EndpointSet) Join2(ctx context.Context, req Join2Request) (res Join2Response, err error) {
	resp, err := s.Join2Endpoint(ctx, req)
	return resp.(Join2Response), err
}

func (s EndpointSet) Join3(ctx context.Context, req Join3Request) (res Join3Response, err error) {
	resp, err := s.Join3Endpoint(ctx, req)
	return resp.(Join3Response), err
}

func (s EndpointSet) Lowercase(ctx context.Context, req LowercaseRequest) (res LowercaseResponse, err error) {
	resp, err := s.LowercaseEndpoint(ctx, req)
	return resp.(LowercaseResponse), err
}

func (s EndpointSet) Uppercase(ctx context.Context, req UppercaseRequest) (res UppercaseResponse, err error) {
	resp, err := s.UppercaseEndpoint(ctx, req)
	return resp.(UppercaseResponse), err
}
