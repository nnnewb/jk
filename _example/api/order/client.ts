// Code generated by jk generate transport -t OrderService --protocol http --client --language ts --framework fetch; DO NOT EDIT.
interface CancelOrderRequest {
  order_id: string;
}

interface CancelOrderResponse {
  code: number;
  message: string;
}

interface OrderItem {
  item_id: string;
  quantity: number;
}

interface CreateOrderRequest {
  order_info: Array<OrderItem>;
}

interface CreateOrderResponse {
  code: number;
  message: string;
  order_id: string;
}

interface GetOrderDetailRequest {
  order_id: string;
}

interface GetOrderDetailResponse {
  code: number;
  message: string;
  order_info: Array<OrderItem>;
}

interface UpdateOrderRequest {
  order_info: Array<OrderItem>;
}

interface UpdateOrderResponse {
  code: number;
  message: string;
}

export default {
  baseURL: "",

  cancel_order: async function (
      payload: CancelOrderRequest,
      init?: RequestInit,
  ): Promise<CancelOrderResponse> {
    const u = new URL("/api/v1/order-service/order/cancel", this.baseURL);
    init.body = JSON.stringify(payload);
    init.method = "POST";
    const req = new Request(u, init);
    const resp = await fetch(req, init);
    return await resp.json();
  },
  create_order: async function (
      payload: CreateOrderRequest,
      init?: RequestInit,
  ): Promise<CreateOrderResponse> {
    const u = new URL("/api/v1/order-service/order", this.baseURL);
    init.body = JSON.stringify(payload);
    init.method = "POST";
    const req = new Request(u, init);
    const resp = await fetch(req, init);
    return await resp.json();
  },
  order_detail: async function (
      payload: GetOrderDetailRequest,
      init?: RequestInit,
  ): Promise<GetOrderDetailResponse> {
    const u = new URL("/api/v1/order-service/order/detail", this.baseURL);
    Object.getOwnPropertyNames(payload).map((prop) =>
        u.searchParams.append(prop, payload[prop]),
    );
    init.method = "GET";
    const req = new Request(u, init);
    const resp = await fetch(req, init);
    return await resp.json();
  },
  update: async function (
      payload: UpdateOrderRequest,
      init?: RequestInit,
  ): Promise<UpdateOrderResponse> {
    const u = new URL("/api/v1/order-service/order", this.baseURL);
    init.body = JSON.stringify(payload);
    init.method = "PUT";
    const req = new Request(u, init);
    const resp = await fetch(req, init);
    return await resp.json();
  },
};
