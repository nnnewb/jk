// Code generated by jk generate transport -t Service -P http -s -l go -f http --swagger --embed-swagger; DO NOT EDIT.

package order

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	khttp "github.com/go-kit/kit/transport/http"
	schema "github.com/gorilla/schema"
	httpSwagger "github.com/swaggo/http-swagger/v2"
	"io"
	"log"
	"net/http"
)

func beautifyErrorEncoder(ctx context.Context, err error, wr http.ResponseWriter) {
	var resp struct {
		Code    int    `json:"code"`
		Message string `json:"message"`
	}

	resp.Code = -1
	resp.Message = fmt.Sprintf("error occurred: %v", err)
	json.NewEncoder(wr).Encode(resp)
}

func httpJSONRequestDecoder[T any](ctx context.Context, req *http.Request) (any, error) {
	var request T
	err := json.NewDecoder(req.Body).Decode(&request)
	if err != nil {
		return nil, err
	}
	return &request, nil
}

func httpQueryStringRequestDecoder[T any](ctx context.Context, req *http.Request) (any, error) {
	var request T
	defer req.Body.Close()
	err := schema.NewDecoder().Decode(&request, req.URL.Query())
	if err != nil {
		return nil, err
	}
	return &request, nil
}

type HTTPServerSet struct {
	CancelOrderServer *khttp.Server
	CreateOrderServer *khttp.Server
	OrderDetailServer *khttp.Server
	UpdateServer      *khttp.Server
}

func NewHTTPServerSet(endpointSet EndpointSet, options ...khttp.ServerOption) HTTPServerSet {
	options = append(options, khttp.ServerBefore(khttp.PopulateRequestContext))
	options = append(options, khttp.ServerErrorEncoder(beautifyErrorEncoder))
	return HTTPServerSet{
		CancelOrderServer: khttp.NewServer(
			endpointSet.CancelOrderEndpoint,
			httpJSONRequestDecoder[CancelOrderRequest],
			khttp.EncodeJSONResponse,
			options...),
		CreateOrderServer: khttp.NewServer(
			endpointSet.CreateOrderEndpoint,
			httpJSONRequestDecoder[CreateOrderRequest],
			khttp.EncodeJSONResponse,
			options...),
		OrderDetailServer: khttp.NewServer(
			endpointSet.OrderDetailEndpoint,
			httpQueryStringRequestDecoder[GetOrderDetailRequest],
			khttp.EncodeJSONResponse,
			options...),
		UpdateServer: khttp.NewServer(
			endpointSet.UpdateEndpoint,
			httpJSONRequestDecoder[UpdateOrderRequest],
			khttp.EncodeJSONResponse,
			options...),
	}
}

func (s *HTTPServerSet) Register(mux *http.ServeMux) {
	mux.HandleFunc(
		"/api/v1/order-service/order/cancel", func(wr http.ResponseWriter, req *http.Request) {
			switch req.Method {
			case http.MethodPost:
				s.CancelOrderServer.ServeHTTP(wr, req)
				return
			default:
				wr.WriteHeader(http.StatusMethodNotAllowed)
				_, err := io.WriteString(wr, "\"{\\\"code\\\": -1, \\\"message\\\": \\\"method not allowed\\\"}\"")
				if err != nil {
					log.Printf("write 405 error response failed, error %+v", err)
				}
				log.Printf("write 405 error response failed, error %+v", err)
				return
			}
		})
	mux.HandleFunc(
		"/api/v1/order-service/order", func(wr http.ResponseWriter, req *http.Request) {
			switch req.Method {
			case http.MethodPost:
				s.CreateOrderServer.ServeHTTP(wr, req)
				return
			case http.MethodPut:
				s.UpdateServer.ServeHTTP(wr, req)
				return
			default:
				wr.WriteHeader(http.StatusMethodNotAllowed)
				_, err := io.WriteString(wr, "\"{\\\"code\\\": -1, \\\"message\\\": \\\"method not allowed\\\"}\"")
				if err != nil {
					log.Printf("write 405 error response failed, error %+v", err)
				}
				log.Printf("write 405 error response failed, error %+v", err)
				return
			}
		})
	mux.HandleFunc(
		"/api/v1/order-service/order/detail", func(wr http.ResponseWriter, req *http.Request) {
			switch req.Method {
			case http.MethodGet:
				s.OrderDetailServer.ServeHTTP(wr, req)
				return
			default:
				wr.WriteHeader(http.StatusMethodNotAllowed)
				_, err := io.WriteString(wr, "\"{\\\"code\\\": -1, \\\"message\\\": \\\"method not allowed\\\"}\"")
				if err != nil {
					log.Printf("write 405 error response failed, error %+v", err)
				}
				log.Printf("write 405 error response failed, error %+v", err)
				return
			}
		})
}

//go:embed swagger.json
var httpEmbedSwagger embed.FS

func (s *HTTPServerSet) RegisterEmbedSwaggerUI(mux *http.ServeMux) {
	mux.Handle(
		"/swagger/service/spec/*rest",
		http.StripPrefix("/swagger/service/spec/", http.FileServer(http.FS(httpEmbedSwagger))))
	mux.Handle(
		"/swagger/service/swagger-ui/*rest",
		httpSwagger.Handler(httpSwagger.URL("/swagger/service/spec/swagger.json")))
}
