// Code generated by jk generate transport -t OrderService --protocol http --client --language go --framework http; DO NOT EDIT.

package order

import (
	"context"
	"encoding/json"
	"fmt"
	khttp "github.com/go-kit/kit/transport/http"
	schema "github.com/gorilla/schema"
	"net/http"
	"net/url"
)

func httpJSONResponseDecoder[T any](ctx context.Context, resp *http.Response) (any, error) {
	var response T
	defer resp.Body.Close()
	err := json.NewDecoder(resp.Body).Decode(&response)
	if err != nil {
		return nil, err
	}
	return &response, nil
}

func httpQueryStringEncoder(ctx context.Context, r *http.Request, request any) error {
	var values url.Values
	err := schema.NewEncoder().Encode(request, values)
	if err != nil {
		return err
	}
	r.URL.RawQuery = values.Encode()
	return nil
}

type HTTPClientSet struct {
	CancelOrderClient *khttp.Client
	CreateOrderClient *khttp.Client
	OrderDetailClient *khttp.Client
	UpdateClient      *khttp.Client
}

func NewHTTPClientSet(scheme, host string, port int, options ...khttp.ClientOption) HTTPClientSet {
	return HTTPClientSet{
		CancelOrderClient: khttp.NewClient(
			http.MethodPost,
			&url.URL{
				Host:   fmt.Sprintf("%s:%d", host, port),
				Path:   "/api/v1/order-service/order/cancel",
				Scheme: scheme,
			},
			khttp.EncodeJSONRequest,
			httpJSONResponseDecoder[CancelOrderResponse],
			options...),
		CreateOrderClient: khttp.NewClient(
			http.MethodPost,
			&url.URL{
				Host:   fmt.Sprintf("%s:%d", host, port),
				Path:   "/api/v1/order-service/order",
				Scheme: scheme,
			},
			khttp.EncodeJSONRequest,
			httpJSONResponseDecoder[CreateOrderResponse],
			options...),
		OrderDetailClient: khttp.NewClient(
			http.MethodGet,
			&url.URL{
				Host:   fmt.Sprintf("%s:%d", host, port),
				Path:   "/api/v1/order-service/order/detail",
				Scheme: scheme,
			},
			httpQueryStringEncoder,
			httpJSONResponseDecoder[GetOrderDetailResponse],
			options...),
		UpdateClient: khttp.NewClient(
			http.MethodPut,
			&url.URL{
				Host:   fmt.Sprintf("%s:%d", host, port),
				Path:   "/api/v1/order-service/order",
				Scheme: scheme,
			},
			khttp.EncodeJSONRequest,
			httpJSONResponseDecoder[UpdateOrderResponse],
			options...),
	}
}

func (s HTTPClientSet) EndpointSet() EndpointSet {
	return EndpointSet{
		CancelOrderEndpoint: s.CancelOrderClient.Endpoint(),
		CreateOrderEndpoint: s.CreateOrderClient.Endpoint(),
		OrderDetailEndpoint: s.OrderDetailClient.Endpoint(),
		UpdateEndpoint:      s.UpdateClient.Endpoint(),
	}
}
