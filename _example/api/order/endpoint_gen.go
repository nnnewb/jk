// Code generated by jk generate all -t OrderService --api-version v2; DO NOT EDIT.

package order

import (
	"context"
	"github.com/go-kit/kit/endpoint"
)

func makeEndpointFromFunc[REQ, RESP any](f func(context.Context, REQ) (RESP, error)) endpoint.Endpoint {
	return func(ctx context.Context, r interface{}) (interface{}, error) {
		req := r.(REQ)
		return f(ctx, req)
	}
}

type EndpointSet struct {
	CancelOrderEndpoint    endpoint.Endpoint
	CreateOrderEndpoint    endpoint.Endpoint
	GetOrderDetailEndpoint endpoint.Endpoint
}

func (o EndpointSet) CancelOrder(ctx context.Context, req *CancelOrderRequest) (*CancelOrderResponse, error) {
	resp, err := o.CancelOrderEndpoint(ctx, req)

	if err != nil {
		return &CancelOrderResponse{}, err
	}
	return resp.(*CancelOrderResponse), nil
}

func (o EndpointSet) CreateOrder(ctx context.Context, req *CreateOrderRequest) (*CreateOrderResponse, error) {
	resp, err := o.CreateOrderEndpoint(ctx, req)

	if err != nil {
		return &CreateOrderResponse{}, err
	}
	return resp.(*CreateOrderResponse), nil
}

func (o EndpointSet) GetOrderDetail(ctx context.Context, req *GetOrderDetailRequest) (*GetOrderDetailResponse, error) {
	resp, err := o.GetOrderDetailEndpoint(ctx, req)

	if err != nil {
		return &GetOrderDetailResponse{}, err
	}
	return resp.(*GetOrderDetailResponse), nil
}

func NewEndpointSet(svc OrderService) EndpointSet {
	return EndpointSet{
		CancelOrderEndpoint:    makeEndpointFromFunc(svc.CancelOrder),
		CreateOrderEndpoint:    makeEndpointFromFunc(svc.CreateOrder),
		GetOrderDetailEndpoint: makeEndpointFromFunc(svc.GetOrderDetail),
	}
}

func (s EndpointSet) With(outer endpoint.Middleware, others ...endpoint.Middleware) EndpointSet {
	return EndpointSet{
		CancelOrderEndpoint:    endpoint.Chain(outer, others...)(s.CancelOrderEndpoint),
		CreateOrderEndpoint:    endpoint.Chain(outer, others...)(s.CreateOrderEndpoint),
		GetOrderDetailEndpoint: endpoint.Chain(outer, others...)(s.GetOrderDetailEndpoint),
	}
}
