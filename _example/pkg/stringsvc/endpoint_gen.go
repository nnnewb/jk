// Code generated by jk generate all -t Service; DO NOT EDIT.

package stringsvc

import (
	"context"
	"github.com/go-kit/kit/endpoint"
)

func makeEndpointFromFunc[REQ, RESP any](f func(context.Context, REQ) (RESP, error)) endpoint.Endpoint {
	return func(ctx context.Context, r interface{}) (interface{}, error) {
		req := r.(REQ)
		return f(ctx, req)
	}
}

type EndpointSet struct {
	BuyEndpoint       endpoint.Endpoint
	JoinEndpoint      endpoint.Endpoint
	Join2Endpoint     endpoint.Endpoint
	Join3Endpoint     endpoint.Endpoint
	LowercaseEndpoint endpoint.Endpoint
	UppercaseEndpoint endpoint.Endpoint
}

func (s EndpointSet) Buy(ctx context.Context, req BuyRequest) (res BuyResponse, err error) {
	resp, err := s.BuyEndpoint(ctx, req)
	return resp.(BuyResponse), err
}

func (s EndpointSet) Join(ctx context.Context, req JoinRequest) (res JoinResponse, err error) {
	resp, err := s.JoinEndpoint(ctx, req)
	return resp.(JoinResponse), err
}

func (s EndpointSet) Join2(ctx context.Context, req Join2Request) (res Join2Response, err error) {
	resp, err := s.Join2Endpoint(ctx, req)
	return resp.(Join2Response), err
}

func (s EndpointSet) Join3(ctx context.Context, req Join3Request) (res Join3Response, err error) {
	resp, err := s.Join3Endpoint(ctx, req)
	return resp.(Join3Response), err
}

func (s EndpointSet) Lowercase(ctx context.Context, req LowercaseRequest) (res LowercaseResponse, err error) {
	resp, err := s.LowercaseEndpoint(ctx, req)
	return resp.(LowercaseResponse), err
}

func (s EndpointSet) Uppercase(ctx context.Context, req UppercaseRequest) (res UppercaseResponse, err error) {
	resp, err := s.UppercaseEndpoint(ctx, req)
	return resp.(UppercaseResponse), err
}

func NewEndpointSet(svc Service) EndpointSet {
	return EndpointSet{
		BuyEndpoint:       makeEndpointFromFunc(svc.Buy),
		Join2Endpoint:     makeEndpointFromFunc(svc.Join2),
		Join3Endpoint:     makeEndpointFromFunc(svc.Join3),
		JoinEndpoint:      makeEndpointFromFunc(svc.Join),
		LowercaseEndpoint: makeEndpointFromFunc(svc.Lowercase),
		UppercaseEndpoint: makeEndpointFromFunc(svc.Uppercase),
	}
}

func (s EndpointSet) With(outer endpoint.Middleware, others ...endpoint.Middleware) EndpointSet {
	return EndpointSet{
		BuyEndpoint:       endpoint.Chain(outer, others...)(s.BuyEndpoint),
		Join2Endpoint:     endpoint.Chain(outer, others...)(s.Join2Endpoint),
		Join3Endpoint:     endpoint.Chain(outer, others...)(s.Join3Endpoint),
		JoinEndpoint:      endpoint.Chain(outer, others...)(s.JoinEndpoint),
		LowercaseEndpoint: endpoint.Chain(outer, others...)(s.LowercaseEndpoint),
		UppercaseEndpoint: endpoint.Chain(outer, others...)(s.UppercaseEndpoint),
	}
}
